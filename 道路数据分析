import pandas as pd
import numpy as np
data = pd.read_csv('US_Accidents_June20.csv')
pd.isnull(data).sum()
data.shape
data.State.value_counts() 
df = data.drop(['ID','Source','TMC','End_Time','Zipcode','Timezone','Start_Lat','Start_Lng','End_Lat','End_Lng',
                'Distance(mi)','Description','Number', 'Street','Side','Country','County',
                'Airport_Code','Weather_Timestamp','Wind_Speed(mph)','Wind_Direction','Sunrise_Sunset',
                'Wind_Chill(F)','Precipitation(in)','Pressure(in)','Humidity(%)','Civil_Twilight', 
                'Nautical_Twilight','Astronomical_Twilight'],axis=1, inplace=False)
Severity 显示事故的严重程度，1最小，4最严重的的影响 。
Start_Time 在本地时区显示事故的开始时间。
City 在地址字段中显示城市。
State 在地址字段中显示州。
Temperature(F) 显示温度（以华氏度为单位）。
Visibility(mi) 显示可见性（以英里为单位）。
Weather_Condition 显示天气状况（雨，雪，雷暴，雾等）。
Amenity 兴趣点（POI）批注，指示附近有便利设施。
Bump 一个POI注释，指示附近有减速带或驼峰。
Crossing 一个POI注释，指示附近有交叉路口。
Give_Way 一个POI注释，指示在附近位置存在Give_way标志。
Junction 一个POI注释，指示附近有交界处。
No_Exit 指示附近位置存在no_exit标志的POI注释。
Railway 一个POI注释，指示附近有铁路。
Roundabout 一个POI注释，指示附近有回旋处。
Station 一个POI注释，指示附近位置有车站（公交车，火车等）。
Stop 一个POI注释，指示在附近位置存在停车标志。
Traffic_Calming 指示在附近位置存在traffic_calming装置的POI注释。
Traffic_Signal 一个POI注释，指示在附近位置存在交通标识。
Turning_Loop 一个POI注释，指示在附近的位置是否存在转弯提示。

df = df[df['State']=='CA']
df.drop('State',axis=1,inplace=True)
pd.isnull(df).sum()
df.dropna(inplace=True)
df = df.reset_index(drop=True)
df['Start_Time'] = pd.to_datetime
df['Start_Time'] = pd.to_datetime(df['Start_Time'])
df['hour(h)'] = df['Start_Time'].dt.hour
df['month'] = df['Start_Time'].dt.month
df['year'] = df['Start_Time'].dt.year
df['Severity'] = df['Severity'].astype(str)
df.info()
df.head()
weather_severity = df.pivot_table(index='Weather_Condition',columns='Severity',aggfunc='size',fill_value=0)
weather_1000 = df['Weather_Condition'].value_counts()
weather_1000 = weather_1000[weather_1000.values<1000]
weather_severity = weather_severity.drop(weather_1000.index.tolist(),axis=0)
weather_severity
weather_severity['total'] = weather_severity.apply(lambda x:x.sum(),axis =1)
weather_severity
Weather_Condition					
weather_severity = weather_severity.sort_values(by='total',axis=0,ascending=False)
weather_severity
Weather_Condition					
weather_severity['percent(%)'] = weather_severity['total']/weather_severity['total'].sum()*100
weather_severity
Severity	1	2	3	4	total	percent(%)
Weather_Condition						
from pyecharts.globals import ThemeType
from pyecharts import options as opts
from pyecharts.charts import Line,Bar,Pie
line = Line(init_opts=opts.InitOpts(theme=ThemeType.WHITE,height='500px'))
line.add_xaxis(weather_severity.index.tolist())
line.add_yaxis('Severity=1',weather_severity['1'].tolist())
line.add_yaxis('Severity=2',weather_severity['2'].tolist())
line.add_yaxis('Severity=3',weather_severity['3'].tolist())
line.add_yaxis('Severity=4',weather_severity['4'].tolist())


line.set_global_opts(title_opts=opts.TitleOpts(title="The relationship between weather and the severity of the accident",
                                               pos_left="18%"),
                    toolbox_opts=opts.ToolboxOpts(pos_top="10%"),
                    xaxis_opts=opts.AxisOpts(axislabel_opts={"rotate":45},name='weather'),
                    legend_opts=opts.LegendOpts(pos_left="80%",pos_top='30%',orient="vertical"),
                    yaxis_opts=opts.AxisOpts(name='Number of accidents',split_number=20))  

line.set_series_opts(label_opts=opts.LabelOpts(is_show=False))
line.render_notebook()
import matplotlib.pyplot as plt
import seaborn as sns
%matplotlib inline
plt.figure(figsize=(8,5))
sns.set(style="darkgrid")
x = df['Temperature(F)'].tolist()
#plt.hist(x)
sns.distplot(x,kde=False)
plt.xlabel('Temperature(F)')
plt.ylabel('Number of accidents')
plt.title('Temperature Distribution')
plt.show()
road_condition = pd.Series([len(df[df['Amenity']==True]),len(df[df['Bump']==True]),
                       len(df[df['Crossing']==True]),len(df[df['Give_Way']==True]),
                       len(df[df['Junction']==True]),len(df[df['No_Exit']==True]),
                       len(df[df['Railway']==True]),len(df[df['Roundabout']==True]),
                       len(df[df['Station']==True]),len(df[df['Stop']==True]),
                       len(df[df['Traffic_Calming']==True]),len(df[df['Traffic_Signal']==True]),
                       len(df[df['Turning_Loop']==True])],
                           index=['Amenity','Bump','Crossing','Give_Way','Junction','No_Exit','Railway',
         'Roundabout','Station','Stop','Traffic_Calming','Traffic_Signal','Turning_Loop']
)

dict_road = {'label':road_condition.index,'Number of accidents':road_condition.values}
road_condition = pd.DataFrame(dict_road).sort_values(by='Number of accidents',ascending=False)
road_condition
bar = Bar(init_opts=opts.InitOpts(theme=ThemeType.ESSOS))
bar.add_xaxis(road_condition['label'].tolist())
bar.add_yaxis('',road_condition['Number of accidents'].tolist())
bar.set_global_opts(title_opts=opts.TitleOpts(title="The relationship between road condition and the number of the accident",pos_left="13%"),
                    xaxis_opts=opts.AxisOpts(axislabel_opts={"rotate":45},name='road condition'),
                    yaxis_opts=opts.AxisOpts(name='Number of accidents'),
                     toolbox_opts=opts.ToolboxOpts(pos_top="10%"),)  

bar.render_notebook()

plt.figure(figsize=(8,5))
sns.set(style="darkgrid")
x = df['Visibility(mi)'].tolist()
sns.distplot(x, kde=False)
plt.xlabel('Visibility(mi)')
plt.ylabel('Number of accidents')
plt.title('Visibility Distribution in 2016-2020')
plt.xticks([0,5,10,15,20]) 
plt.xlim((0,20))
plt.show()


plt.figure(figsize=(12,8))
sns.set(style="darkgrid")

plt.subplot(3,2,1)
x = df[df['year']==2016]['hour(h)'].tolist()
sns.distplot(x,bins=24, kde=False)
plt.xlabel('hour')
plt.ylabel('Number of accidents')
plt.title('Time of accident per hour in 2016')

plt.subplot(3,2,2)
x = df[df['year']==2017]['hour(h)'].tolist()
sns.distplot(x,bins=24, kde=False)
plt.xlabel('hour')
plt.ylabel('Number of accidents')
plt.title('Time of accident per hour in 2017')

plt.subplot(3,2,3)
x = df[df['year']==2018]['hour(h)'].tolist()
sns.distplot(x,bins=24, kde=False)
plt.xlabel('hour')
plt.ylabel('Number of accidents')
plt.title('Time of accident per hour in 2018')

plt.subplot(3,2,4)
x = df[df['year']==2019]['hour(h)'].tolist()
sns.distplot(x,bins=24, kde=False)
plt.xlabel('hour')
plt.ylabel('Number of accidents')
plt.title('Time of accident per hour in 2019')

plt.subplot(3,2,5)
x = df[df['year']==2020]['hour(h)'].tolist()
sns.distplot(x,bins=24, kde=False)
plt.xlabel('hour')
plt.ylabel('Number of accidents')
plt.title('Time of accident per hour in 2020')

plt.subplot(3,2,6)
x = df['hour(h)'].tolist()
sns.distplot(x,bins=24, kde=False)
plt.xlabel('hour')
plt.ylabel('Number of accidents')
plt.title('Time of accident per hour in 2016-2020')

plt.tight_layout() 
plt.show()


plt.figure(figsize=(12,8))
sns.set(style="darkgrid")


plt.subplot(2,2,1)
x1 = df[df['year']==2016]['month'].tolist()
sns.distplot(x1,bins=10, kde=False)
plt.xlabel('month')
plt.ylabel('Number of accidents')
plt.ylim(0,35000)
plt.title('Time of accident per month in 2016')

plt.subplot(2,2,2)
x2 = df[df['year']==2017]['month'].tolist()
sns.distplot(x2,bins=12, kde=False)
plt.xlabel('month')
plt.ylabel('Number of accidents')
plt.ylim(0,35000)
plt.title('Time of accident per month in 2017')

plt.subplot(2,2,3)
x3 = df[df['year']==2018]['month'].tolist()
sns.distplot(x3,bins=12, kde=False)
plt.xlabel('month')
plt.ylabel('Number of accidents')
plt.ylim(0,35000)
plt.title('Time of accident per month in 2018')

plt.subplot(2,2,4)
x4 = df[df['year']==2019]['month'].tolist()
sns.distplot(x4,bins=12, kde=False)
plt.xlabel('month')
plt.ylabel('Number of accidents')
plt.title('Time of accident per month in 2019')

# 2020年只有前6个月的数据，在此不做分析

plt.tight_layout() 
plt.show()


city_total = df.groupby(by='City').Severity.count().sort_values(ascending=False)


city = city_total.head(15)

dict_city = {'city':city.index,'Number of accidents':city.values}
city_top15 = pd.DataFrame(dict_city)
city_top15['Relative percentage(%)'] = city_top15['Number of accidents']/city_top15['Number of accidents'].sum()*100
city_top15['Absolute percentage(%)'] = city_top15['Number of accidents']/city_total.sum()*100
city_top15
city	Number of accidents	Relative percentage(%)	Absolute percentage(%)


pie = Pie(init_opts=opts.InitOpts(width='1350px',height='550px'))
pie.add('',[list(z) for z in zip(city_top15['city'].tolist(),city_top15['Relative percentage(%)'].tolist())],radius=['35%','60%'])
pie.set_global_opts(title_opts=opts.TitleOpts(title='Proportion of traffic accidents in each city in 2016-2020'), 
                     legend_opts=opts.LegendOpts(orient='vertical', pos_top='15%', pos_left='2%'))
pie.set_series_opts(label_opts=opts.LabelOpts(formatter="{b}:{d}%"))
pie.render_notebook()

accident_city_year = df.pivot_table(index=df['City'],columns=df['year'],aggfunc='size')
accident_city_year['city_total'] = accident_city_year.sum(axis=1)
accident_city_year = accident_city_year.sort_values(by='city_total',ascending=False).head(10)
accident_city_year.loc['total'] = accident_city_year.sum()
# 2020年数据缺失一半，故不进行分析；2016年数据缺失2个月，仅供参考
accident_city_year = accident_city_year.drop(2020,axis=1)
accident_city_year



bar2 = Bar(init_opts=opts.InitOpts(theme=ThemeType.LIGHT))

bar2.add_xaxis(accident_city_year.index.tolist())
bar2.add_yaxis('2016',accident_city_year[2016].tolist())
bar2.add_yaxis('2017',accident_city_year[2017].tolist())
bar2.add_yaxis('2018',accident_city_year[2018].tolist())
bar2.add_yaxis('2019',accident_city_year[2019].tolist())

bar2.reversal_axis()

bar2.set_global_opts(title_opts=opts.TitleOpts(title="The number of accidents per year in different cities",pos_left="25%"),
                    toolbox_opts=opts.ToolboxOpts(pos_top="5%",pos_left="90%"),
                    legend_opts=opts.LegendOpts(pos_left="90%",pos_top='40%',orient="vertical"),
                    yaxis_opts=opts.AxisOpts(name='Number of accidents'))  

bar2.set_series_opts(label_opts=opts.LabelOpts(is_show=False))

bar2.render_notebook()
